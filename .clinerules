# TypeScript プロジェクトのルール

あなたは、TypeScriptを使用してプロジェクトを開発することになりました。
このプロジェクトでは、以下のルールに従ってコーディングを行ってください。

## 日本語の利用

- 回答や説明は日本語を使用してください。
- 難しい専門用語を使う場合は、簡単に説明を添えてください。
- コード内のコメントは日本語で記述してください。

## 開発手順

- 完成時には必ず全体のテストを実施してください

## 開発手法

- プログラミング言語は **TypeScript** を利用してください。
- コードはクラスベースではなく関数型プログラミングで行ってください。
- 開発は曳光弾( Tracer Bullet )の手法で実施してください。
  - 開発は E2E に開始から終了までの全体を薄く実装していく手法です。
  - 薄く動くウォーキングスケルトンを作成し徐々に機能を追加して下さい。
  - 一通り通る段階ごとにこまめにコミットを行ってください。
- 開発は TDD（テスト駆動開発）を意識して開発を行ってください。
  - 最初にテストリスト（TODO）を作成してください
  - テストが RED 失敗することを確認してください。
  - 実装を行いテストが GREEN 成功することを確認してください。
  - リファクタリングを行い、テストが GREEN 成功することを確認してください。
- 契約による設計（dbc）を意識して実装してください。
  - 契約による設計は事前条件、事後条件、不変条件を意識して実装を行うことです。
  - 事前条件は関数の事前に満たすべき条件です。
  - 事後条件は関数の事後に満たすべき条件です。
  - 不変条件は関数の実行中に変わらない条件です。
- 開発はリファクタリングを意識して行ってください。
  - リファクタリングはコードの構造を変えずにコードの品質を向上させることです。
  - リファクタリングはコードの可読性、保守性、拡張性を向上させることです。
  - リファクタリングはコードの冗長性を排除し、コードの重複を排除することです。
  - リファクタリングはコードの複雑性を排除し、コードの理解を容易にすることです。
- SOLID の原則を意識して開発を行ってください。
  - 単一責任の原則（Single Responsibility Principle）
  - オープン・クローズドの原則（Open/Closed Principle）
  - リスコフの置換原則（Liskov Substitution Principle）
  - インターフェース分離の原則（Interface Segregation Principle）
  - 依存性逆転の原則（Dependency Inversion Principle）
- ドメイン駆動設計（DDD）を意識して開発を行ってください。
  - ドメイン駆動設計はビジネスロジックを中心に設計を行うことです。
  - デザインパターンの適用が可能な場合は適用することを考えてください
  - アーキテクトはクリーンアーキテクトを意識して設計を行ってください。
- 関数やメソッドは一画面に収まるサイズにしてください。
- 関数やメソッドは一つの処理に集中するようにしてください。
- サイクロマティック複雑度は7以下に抑えるようにしてください。
- インデントは **スペース2つ** とします。
- 関数や変数名にはわかりやすい **英語** を使用します。
- 関数名やメソッド名は **動詞** で命名してください。
- 変数名は **名詞** で命名してください。
- 変数名や関数名は **キャメルケース** を使用します。
- クラス名には **パスカルケース** を利用してください。
- ファイル名はケバブケース（例: `customer-manager.ts`）を利用してください。
- 定数には **大文字** を使用してください。
- コメントは日本語で書き、コードの目的や複雑な処理を明確に説明してください。正し必要以上のコメントは避けて関数名や変数名で語れるようにしてください。
- Try/Catch は極力避け、エラーハンドリングを適切に行ってください。
- エラーが発生した場合は適切なメッセージを表示してください。
- 表明するプログラムを意識して有り得ない状態は排除して早めにプログラムが終了するようにしてください。
- CQS の原則を意識して開発を行ってください。
  - CQS の原則はコマンドとクエリを分離することです。
  - コマンドはオブジェクトの状態を変更することです。
  - クエリはオブジェクトの状態を取得することです。
- プログラムの状態を意識して開発を行ってください。
  - プログラムの状態は変数や関数の状態を意味します。
  - プログラムの状態は変更可能な状態と不変な状態に分けて考えてください。

## テスト

- 一つのコードに対してテストは必ず作成してください。
- テストは振る舞いベースで作成してください。
- テストはできる限りテストダブルを使わないことを心がけてください。正し、使わないことで複雑になってしまう場合は使っても構いません。
- テストは対象のコードスコープを意識してください。複数のファイルを同時にテストしたり、テスト対象のコード以外のコードをテストしないようにしてください。
- テストスメルに注意してください。テストスメルがある場合は、テストコードをリファクタリングしてください。
  - Assertion Roulette（アサーションルーレット）
  - Conditional Test Logic（条件付きテストロジック）
  - Constructor Initialization（コンストラクタ初期化）
  - Coupled Test（カップルテスト）
  - Eager Test（欲張りテスト）
  - Lazy Test（怠惰テスト）
  - Mystery Guest（謎のゲスト）
  - Resource Optimism（リソース楽観主義）
  - Sensitive Equality（繊細な等価性）
  - Sleepy Test（眠たいテスト）
  - Unknown Test（不明なテスト）
  - Default Test（デフォルトテスト）
  - Duplicate Assert（重複アサート）
  - Empty Test（空のテスト）
  - Exception Handling（例外処理）
  - General Fixture（汎用的なフィクスチャ）
  - Ignored Test（無視されたテスト）
  - Magic Number Test（マジックナンバーテスト）
  - Redundant Print（冗長なプリント）
  - Redundant Assertion（冗長なアサーション）
- テストは意味のある単位にまとめてください。テストが長すぎる場合は、テストを分割してください。
- テストはできる限り独立していることを意識してください。テストが依存している場合は、依存関係を解消してください。
- テストはできる限り簡潔に記述してください。テストが複雑になってしまう場合は、テストコードをリファクタリングしてください。
- テストはできる限り速く実行できるようにしてください。テストが遅くなってしまう場合は、テストコードをリファクタリングしてください。
- テストはできる限り安定していることを意識してください。テストが不安定になってしまう場合は、テストコードをリファクタリングしてください。
- テストの実行後に出力される各テストメッセージは仕様書として扱えるように意味がわかる具体的なものにしてください。

## フロントエンドのルール
- フロントエンドのフレームワークは **React** を使用してください。
- フロントエンドのスタイリングには **Tailwind CSS** を使用してください。
- フロントエンドの状態管理には **Jotai** を使用してください。
- フロントエンドのルーティングには **React Router** を使用してください。
- フロントエンドのテストには **Jest** を使用してください。
- フロントエンドの構成には **Atomic Design** を意識してください。
  - atoms：最小の UI 要素。ボタン、アイコン、テキストなど
  - molecules：atoms の組み合わせ。フォーム、カードなど
  - organisms：molecules + 状態管理 + ロジック（1画面に独立して使える単位）
  - templates：レイアウト構造（organisms の配置）
  - pages：ルーティング単位、実画面
- フロントエンドのコンポーネントは **関数コンポーネント** を使用してください。

## バックエンドのルール
- バックエンドは ** DDD ** を意識して設計してください。
- バックエンドのアーキテクトはクリーンアーキテクトを意識して設計してください。
- バックエンドのフレームワークは **Express** を使用してください。
- バックエンドのテストには **Jest** を使用してください。
- バックエンドの認証には **JWT** を使用してください。

## ドキュメントの作成
- 作成した内容には README のドキュメントを作成してください。
- README にはプロジェクトの概要、使い方、インストール方法、テスト方法、ライセンスなどを記載してください。
- ドキュメントは日本語で記述してください。
- ドキュメントは Markdown 形式で記述してください。
- テストコードの説明やテストの内容も日本語で明確に書いてください。

## そのほかのルール・制約
- 作業を開始する際にはまず、具体的な実装前に概要や設計を日本語で提示し、承認を得てください。
- 作業は常に小さく分割してステップバイステップで進め、途中でこまめに確認を取ってください。

## 禁止事項
- 指示なくファイルを削除・上書きすることを禁止します。
- 直接本番環境に影響するようなコードを書くことは禁止します。
