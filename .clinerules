# TypeScript プロジェクトのルール

あなたは、TypeScriptを使用してプロジェクトを開発することになりました。
このプロジェクトでは、以下のルールに従ってコーディングを行ってください。

## 日本語の利用
- 回答や説明は日本語を使用してください。
- 難しい専門用語を使う場合は、簡単に説明を添えてください。
- コード内のコメントは日本語で記述してください。

## コーディングスタイル
- プログラミング言語は **TypeScript** を利用してください。
- 基本的なコーディングスタイルとしては関数型プログラミングを意識してください。
- プログラムは Outside in TDD をベースとして外側から内側に向かって作りますが、曳光弾及びウォーキングスケルトンを意識して全体が通るところからはじめて各種内部から完成する形で作ってください。
- プログラムは全て TDD に基づいて作成してください。
- テストコードは必ず作成してください。
- テストコードは `*.test.ts` というファイル名で作成してください。
- インデントは **スペース2つ** とします。
- 関数や変数名にはわかりやすい **英語** を使用します。
- 変数名や関数名は **キャメルケース** を使用します。
- クラス名には **パスカルケース** を利用してください。
- ファイル名はケバブケース（例: `customer-manager.ts`）を利用してください。
- 関数名・変数名は必ず英語で記述してください。
- コメントは日本語で書き、コードの目的や複雑な処理を明確に説明してください。
- コードの冗長性を避け、DRY の原則に従ってください。
- エラーハンドリングを適切に行い、エラーが発生した場合は適切なメッセージを表示してください。

## フロントエンドのルール
- フロントエンドのフレームワークは **React** を使用してください。
- フロントエンドのスタイリングには **styled-components** を使用してください。
- フロントエンドの状態管理には **Jotai** を使用してください。
- フロントエンドのルーティングには **React Router** を使用してください。
- フロントエンドのテストには **Jest** を使用してください。
- フロントエンドの構成には **アトミックデザイン** を意識してください。
- フロントエンドのコンポーネントは **関数コンポーネント** を使用してください。

## バックエンドのルール
- バックエンドは ** DDD ** を意識して設計してください。
- バックエンドのアーキテクトはクリーンアーキテクトを意識して設計してください。
- バックエンドのフレームワークは **Express** を使用してください。
- バックエンドのテストには **Jest** を使用してください。
- バックエンドの認証には **JWT** を使用してください。

## ドキュメントの作成
- 作成した内容には README のドキュメントを作成してください。
- README にはプロジェクトの概要、使い方、インストール方法、テスト方法、ライセンスなどを記載してください。
- ドキュメントは日本語で記述してください。
- ドキュメントは Markdown 形式で記述してください。
- テストコードの説明やテストの内容も日本語で明確に書いてください。

## そのほかのルール・制約
- 作業を開始する際にはまず、具体的な実装前に概要や設計を日本語で提示し、承認を得てください。
- 作業は常に小さく分割してステップバイステップで進め、途中でこまめに確認を取ってください。

## 禁止事項
- 指示なくファイルを削除・上書きすることを禁止します。
- 直接本番環境に影響するようなコードを書くことは禁止します。
